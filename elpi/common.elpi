%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           %                     Trakt                       %
%  _______        _    _    %            Copyright (C) 2022 MERCE             %
% |__   __|      | |  | |   %     (Mitsubishi Electric R&D Centre Europe)     %
%    | |_ __ __ _| | _| |_  %        Enzo Crance <enzo.crance@inria.fr>       %
%    | | '__/ _` | |/ / __| %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    | | | | (_| |   <| |_  % This file is distributed under the terms of the %
%    |_|_|  \__,_|_|\_\\__| %   GNU Lesser General Public License Version 3   %
%                           %  (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred verbose.

verbose :-
  coq.option.get ["trakt.verbosity"] (coq.option.int (some N)),
  N > 0.

pred debug.

debug :-
  coq.option.get ["trakt.verbosity"] (coq.option.int (some 2)).

pred invert-variance i:type-variance, o:type-variance.

invert-variance covariant contravariant.
invert-variance contravariant covariant.

% make a context with its variable being at a specific position in a function application,
% from the part of the AST above the function application (context of a list of terms), the
% arguments that must precede it, and the arguments that must follow it
pred arg-context-from-position
  i:((list term) -> term), i:(list term), i:(list term), o:(term -> term).

arg-context-from-position CtxF ArgsBefore ArgsAfter (t\ CtxF (ArgListF t)) :-
  pi x\ std.append ArgsBefore [x|ArgsAfter] (ArgListF x).

% try to remove "= true" or "= false" in the head of a term and give the associated proof
pred remove-bool-cst-eq i:term, i:type-variance, o:term, o:proof.

remove-bool-cst-eq {{ lp:X = true }} _ X (proof.none {{ lp:X = true }}).

remove-bool-cst-eq {{ true = lp:X }} TVar X (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ is_true_symmetry lp:X }}
  ) (
    ProofTerm = {{ is_true_symmetry_contra lp:X }}
  ).

remove-bool-cst-eq {{ lp:X = false }} TVar {{ negb lp:X }} (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ false_negb lp:X }}
  ) (
    ProofTerm = {{ false_negb_contra lp:X }}
  ).

remove-bool-cst-eq {{ false = lp:X }} TVar {{ negb lp:X }} (proof.of-term ProofTerm) :-
  if (TVar = covariant) (
    ProofTerm = {{ false_negb_symmetry lp:X }}
  ) (
    ProofTerm = {{ false_negb_symmetry_contra lp:X }}
  ).

pred remove-bool-cst-eq.list
  i:(list term), i:(list type-variance), i:(list proof), o:(list term), o:(list proof).

remove-bool-cst-eq.list [] [] Proofs [] Proofs.

remove-bool-cst-eq.list [Term|Terms] [TVar|TVars] [Proof|Proofs] [Term'|Terms'] [Proof'|Proofs'] :-
  remove-bool-cst-eq Term TVar Term' RmProof,
  remove-bool-cst-eq.list Terms TVars Proofs Terms' Proofs',
  if (RmProof = proof.none _) (
    Proof' = Proof
  ) (
    Proof' = proof.trans TVar [Proof, RmProof]
  ).

% make a simple function type closer to a target by replacing the types of the arguments
% everytime the type to replace is embeddable into the target type
pred targetify-type i:option term, i:term, o:term.

targetify-type (some _ as ETargetOpt) {{ lp:T1 -> lp:T2 }} {{ lp:T1' -> lp:T2' }} :- !,
  targetify-type ETargetOpt T1 T1',
  targetify-type ETargetOpt T2 T2'.

targetify-type (some ETarget) T ETarget :-
  embedding T ETarget _ _ _ _ _ _ _, !.

targetify-type (some ETarget) T ETarget :-
  conversion-allowed {term-head T},
  embedding T' ETarget _ _ _ _ _ _ _,
  coq.unify-eq T' T ok, !.

targetify-type _ T T.

pred make-fun-type i:term, o:coqfuntype.

make-fun-type T (pr OutT InTs) :-
  make-fun-type.aux T OutT InTs.

pred make-fun-type.aux i:term, o:term, o:(list term).

make-fun-type.aux {{ lp:A -> lp:B }} OutT [A|InB] :- !,
  make-fun-type.aux B OutT InB.

make-fun-type.aux T OutT [A|InB] :-
  coq.unify-eq T {{ lp:A -> lp:B }} ok, !,
  make-fun-type.aux B OutT InB.

make-fun-type.aux T T [].

% clear all uses of custom constructors introduced previously during the preprocessing
pred clear-custom-terms i:term, o:term.

clear-custom-terms (prod N T F) (prod N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (fun N T F) (fun N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (prod2 N _ T F) (prod N T' F') :-
  !, pi x\ clear-custom-terms (F x) (F' x),
  clear-custom-terms T T'.

clear-custom-terms (cast E) E :- !.

clear-custom-terms (app [F|Args]) (app [F'|Args']) :-
  !, std.map Args clear-custom-terms Args',
  clear-custom-terms F F'.

clear-custom-terms Term Term.

pred term-head i:term, o:term.

term-head (app [app L|_]) H :- !,
  term-head (app L) H.
term-head (app [H|_]) H :- !.
term-head Term Term.

pred fill-vars i:term, o:term, o:list term.

fill-vars (fun _ _ F) Out [X|Used] :- !,
  fill-vars (F X) Out Used.
fill-vars T T [].

pred unify-args i:list term, o:list term.

unify-args [] _ :- !.
unify-args _ [] :- !.
unify-args [A|As] [A|Bs] :- !,
  unify-args As Bs.
unify-args [A|As] [B|Bs] :-
  conversion-allowed {term-head A},
  coq.unify-eq A B ok,
  unify-args As Bs.

pred when i:prop, i:prop.

when Condition Code :-
  if Condition Code true.

pred zeta-reduce i:term, o:term.

zeta-reduce (let _ _ X F) Out :- !,
  zeta-reduce (F X) Out.

zeta-reduce Term Term.

pred fun-term-head i:term, o:term.

fun-term-head (fun _ _ F) Head :- !,
  fun-term-head (F _) Head.
fun-term-head T Head :-
  term-head T Head.

pred check-relation
  i:int,             % number of non-type arguments
  i:term,            % source relation R
  i:term,            % source relation type
  i:term,            % target relation R'
  i:term,            % target relation type
  i:term,            % proof type
  i:prop,            % true if we are processing the prefix of the type of R, i.e. quantifiers that
                     % are only present in R but not in R'
  i:int,             % current NDrop
  o:int,             % final NDrop
  o:term,            % logical type of R
  o:term,            % logical type of R'
  i:relation-action, % argument to know if the next argument is provided or still to infer
  o:option term.     % target embedding type when replacing R with R'

% first relation has the right shape
check-relation NArgs R T R' T' ProofT _ NDrop NDrop OutT OutT' Action ETargetOpt :-
  make-fun-type T (pr OutT InTs),
  std.length InTs NArgs, !,
  make-fun-type T' (pr OutT' InTs'),
  std.assert! (std.length InTs' NArgs) {std.string.concat "\n"
    ["types of R and R' do not overlap (arities are different)", "", ""]},
  std.assert! (OutT = {{ Prop }} ; OutT = {{ bool }}) {std.string.concat "\n"
    ["R is not a relation: check that its output type is bool or Prop", "", ""]},
  std.assert! (OutT' = {{ Prop }} ; OutT' = {{ bool }}) {std.string.concat "\n"
    ["R' is not a relation: check that its output type is bool or Prop", "", ""]},
  make-expected-type-relation R R' OutT OutT' InTs InTs' ExpectedProofT,
  std.assert! (coq.unify-eq ProofT ExpectedProofT ok) {std.string.concat "" [
    "Proof type mismatch\n",
    "expected: ", {coq.term->string ExpectedProofT},
    "\ngot: ", {coq.term->string ProofT}, "\n\n"
  ]},
  if (Action = check-only) (
    ETargetOpt = some ETarget,
    std.assert! (std.forall2 InTs InTs' (x\ y\ when (exists-embedding x y _) (y = ETarget)))
      {std.string.concat "\n"
        ["an embedding is made towards another target type than the provided one", "", ""]}
  ) (
    infer-embedding-target-rel InTs InTs' OutT' ETargetOpt
  ).

% uniform quantifier -> not in the prefix anymore
check-relation
  NArgs R T R' T' ProofT _ CurrNDrop FinalNDrop LSource LTarget ESourceOpt ETargetOpt :-
    coq.unify-eq T (prod N UTy F) ok,
    coq.unify-eq T' (prod _ UTy F') ok,
    coq.unify-eq ProofT (prod _ UTy PF) ok, !,
    @pi-decl N UTy u\
      check-relation
        NArgs {coq.mk-app R [u]} (F u) {coq.mk-app R' [u]} (F' u) (PF u)
        false CurrNDrop FinalNDrop LSource LTarget ESourceOpt ETargetOpt.

% quantifier not present in R' -> drop if we are still in the prefix
check-relation
  NArgs R T R' T' ProofT true CurrNDrop FinalNDrop LSource LTarget ESourceOpt ETargetOpt :-
    coq.unify-eq T (prod N UTy F) ok,
    coq.unify-eq ProofT (prod _ UTy PF) ok,
    make-fun-type T (pr _ []),
    not (T' = prod _ UTy _), !,
    CurrNDrop1 is CurrNDrop + 1,
    @pi-decl N UTy u\
      check-relation
        NArgs {coq.mk-app R [u]} (F u) R' T' (PF u)
        true CurrNDrop1 FinalNDrop LSource LTarget ESourceOpt ETargetOpt.

check-relation _ _ _ _ _ _ _ _ _ _ _ _ _ :-
  coq.error "quantifier typing error".

pred infer-embedding-target-rel i:list term, i:list term, i:term, o:option term.

infer-embedding-target-rel [] [] _ none.

infer-embedding-target-rel [A|As] [B|Bs] LTarget ETargetOpt :-
  (B = A ; coq.unify-eq B A ok), !,
  infer-embedding-target-rel As Bs LTarget ETargetOpt.

infer-embedding-target-rel [A|As] [B|Bs] LTarget (some B) :-
  exists-embedding A B L,
  (L = some LTarget ; L = none),
  std.forall2 As Bs (x\ y\ when (exists-embedding x y _) (y = B)).

pred make-expected-type-relation
  i:term, i:term, i:term, i:term, i:(list term), i:(list term), o:term.

make-expected-type-relation R R' OutT OutT' InTs InTs' T :-
  make-expected-type-relation.aux R R' OutT OutT' InTs InTs' [] [] T.

pred make-expected-type-relation.aux
  i:term, i:term, i:term, i:term, i:(list term),
  i:(list term), i:(list term), i:(list term), o:term.

make-expected-type-relation.aux R R' OutT OutT' [] [] RVars REVars T :-
  !, std.rev RVars Vars,
  std.rev REVars EVars,
  if (OutT = {{ bool }}) (
    Cast' = (b\ b),
    if (OutT' = {{ bool }}) (
      % bool and bool: no cast, link with equality
      Cast = (b\ b),
      Link = (b1\ b2\ {{ @eq bool lp:b1 lp:b2 }})
    ) (
      % bool and Prop: cast to Prop, link with equivalence
      Cast = (b\ {{ @eq bool lp:b true }}),
      Link = (p1\ p2\ {{ lp:p1 <-> lp:p2 }})
    )
  ) (
    Cast = (p\ p),
    Link = (p1\ p2\ {{ lp:p1 <-> lp:p2 }}),
    if (OutT' = {{ bool }}) (
      % Prop and bool: cast to Prop, link with equivalence
      Cast' = (b\ {{ @eq bool lp:b true }})
    ) (
      % Prop and Prop: no cast, link with equality
      Cast' = (p\ p)
    )
  ),
  T = Link (Cast (app [R|Vars])) (Cast' (app [R'|EVars])).

make-expected-type-relation.aux
  R R' OutT OutT' [InT|InTs] [InT'|InTs'] Vars EVars (prod _ CInT TF) :-
    embedding CInT CInT' E _ _ _ _ _ _,
    coq.unify-eq InT CInT ok,
    coq.unify-eq InT' CInT' ok, !,
    pi x\
      make-expected-type-relation.aux R R' OutT OutT' InTs InTs' [x|Vars] [app [E, x]|EVars] (TF x).

make-expected-type-relation.aux
  R R' OutT OutT' [InT|InTs] [_|InTs'] Vars EVars (prod _ InT TF) :-
    pi x\ make-expected-type-relation.aux R R' OutT OutT' InTs InTs' [x|Vars] [x|EVars] (TF x).

pred exists-embedding i:term, i:term, o:option term.

exists-embedding T T' L :-
  embedding T T' _ _ _ _ L _ _.
exists-embedding T T' L :-
  embedding U U' _ _ _ _ L _ _,
  coq.unify-eq T U ok,
  coq.unify-eq T' U' ok.
